{"version":3,"sources":["store/exchange/state.ts","store/exchange/reducers.ts","store/exchange/selectors.ts","store/exchange/index.ts","store/index.ts","components/layout/index.tsx","api/exchange.ts","components/exchange/index.tsx","components/utils.ts","containers/exchange/index.tsx","store/exchange/action-creators.ts","app.tsx","index.tsx"],"names":["initialState","amount","convertedAmount","from","to","pending","errorMessage","convert","state","payload","resolveConvert","rejectConvert","getResult","isPending","getErrorMessage","createSlice","name","reducers","actions","reducer","store","configureStore","exchange","getExchange","Header","AntdLayout","Content","Title","Typography","Layout","props","location","useLocation","children","level","theme","mode","selectedKeys","pathname","Item","key","convertToAnotherCurrency","a","query","fetch","source","json","response","rates","toUpperCase","useState","React","useCallback","Exchange","result","onConvert","isInvalidQuery","setIsInvalidQuery","hasErrors","onSearch","parseResult","match","Number","parseExchangeQuery","icon","type","title","subTitle","extra","className","validateStatus","help","Search","size","enterButton","placeholder","loading","aria-label","value","precision","suffix","selectors","dispatch","useDispatch","converToAnotherCurrencyApi","useSelector","undefined","App","path","ReactDOM","render","document","getElementById"],"mappings":"0lBAkBeA,EATa,CAC1BC,OAAQ,KACRC,gBAAiB,KACjBC,KAAM,KACNC,GAAI,KACJC,SAAS,EACTC,aAAc,M,kkBCNhB,IAAMC,EAAU,SAACC,EAAD,GAAsE,IAArDC,EAAoD,EAApDA,QAE/B,OAAO,EAAP,GACKD,EADL,CAEEP,OAH2BQ,EAArBR,OAINC,gBAAiB,KACjBC,KAL2BM,EAAbN,KAMdC,GAN2BK,EAAPL,GAOpBC,SAAS,EACTC,aAAc,QAIZI,EAAiB,SAACF,EAAD,eAClBA,EADkB,CAErBN,gBAFqB,EAAiBO,QAGtCJ,SAAS,KAGLM,EAAgB,SAACH,EAAD,eACjBA,EADiB,CAEpBF,aAFoB,EAAiBG,QAGrCJ,SAAS,KCtBLO,EAAY,SAACJ,GAA0B,IAEzCP,EAIEO,EAJFP,OACAC,EAGEM,EAHFN,gBACAC,EAEEK,EAFFL,KACAC,EACEI,EADFJ,GAEF,OACa,OAAXH,GACuB,OAApBC,GACS,OAATC,GACO,OAAPC,EAEI,KAEF,CACLH,SACAC,kBACAC,OACAC,OAIES,EAAY,SAACL,GAAD,OAA2BA,EAAMH,SAE7CS,EAAkB,SAACN,GAAD,OAAiCA,EAAMF,c,EC3BlCS,YAAY,CACvCC,KAHW,WAIXhB,eACAiB,aAHMC,E,EAAAA,QAMOC,E,EANEA,QCHXC,EAAQC,YAAe,CAC3BF,QAAS,CACPG,cAIEC,EAAc,SAACf,GAAD,OAAkBA,EAAMc,UAE7BF,I,2BCJPI,G,OAAoBC,IAApBD,QAAQE,EAAYD,IAAZC,QACRC,EAAUC,IAAVD,MAuCOE,EAjCuB,SAACC,GACrC,IAAMC,EAAWC,cACTC,EAAaH,EAAbG,SACR,OACE,kBAAC,IAAD,KACE,kBAACT,EAAD,KACE,kBAACG,EAAD,CAAOO,MAAO,GAAd,YAGA,kBAAC,IAAD,CACEC,MAAM,OACNC,KAAK,aACLC,aAAc,CAACN,EAASO,WAExB,kBAAC,IAAKC,KAAN,CAAWC,IAAI,aACb,kBAAC,IAAD,CAAMpC,GAAG,aAAT,aAIF,kBAAC,IAAKmC,KAAN,CAAWC,IAAI,SACb,kBAAC,IAAD,CAAMpC,GAAG,SAAT,WAMN,kBAACsB,EAAD,KACGO,K,yBCtBMQ,EAXe,uCAAG,WAC/BxC,EACAE,EACAC,GAH+B,mBAAAsC,EAAA,6DAKzBC,EALyB,kBAKN1C,EALM,iBAKSE,EALT,eAKoBC,GALpB,SAMVwC,MAAM,iCAAD,OAAkCD,IAN7B,cAMzBE,EANyB,gBAOUA,EAAOC,OAPjB,cAOzBC,EAPyB,yBAQxBA,EAASC,MAAM5C,EAAG6C,gBARM,2CAAH,0D,oDCFtBC,G,OAA0BC,IAA1BD,UAAUE,EAAgBD,IAAhBC,YA0EHC,EA5D2B,SAACvB,GAA0B,IAEjEwB,EAIExB,EAJFwB,OACAhD,EAGEwB,EAHFxB,aACAD,EAEEyB,EAFFzB,QACAkD,EACEzB,EADFyB,UALgE,EAQtBL,GAAS,GARa,mBAQ3DM,EAR2D,KAQ3CC,EAR2C,KAS5DC,EAAYF,KAAoBlD,EAEhCqD,EAAWP,GAAY,SAACT,GAC5B,IAAMiB,ECjCwB,SAChCjB,GAEA,IAAMW,EAASX,EAAMkB,MAAM,qCAC3B,OAAKP,EAGE,CACLrD,OAAQ6D,OAAOR,EAAO,IACtBnD,KAAMmD,EAAO,GACblD,GAAIkD,EAAO,IALJ,KD4BaS,CAAmBpB,GACvC,GAAIiB,EAAa,CACfH,GAAkB,GADH,IAEPxD,EAAqB2D,EAArB3D,OAAQE,EAAayD,EAAbzD,KAAMC,EAAOwD,EAAPxD,GACtBmD,GAAaA,EAAUtD,EAAQE,EAAMC,QAErCqD,GAAkB,KAEnB,CAACF,EAAWE,IAEf,OACE,kBAAC,IAAD,CACEO,KAAM,kBAAC,IAAD,CAAMC,KAAK,gBACjBC,MAAM,+BACNC,SAAS,sEACTC,MACE,yBAAKC,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAK9B,KAAN,CACE+B,eAAgBZ,EAAY,QAAU,GACtCa,KAAMjE,GAEN,kBAAC,IAAMkE,OAAP,CACEC,KAAK,QACLC,YAAa,kBAAC,IAAD,CAAMT,KAAK,UACxBU,YAAY,kBACZC,QAASvE,EACTwE,aAAW,OACXlB,SAAUA,MAIdL,IAAWjD,EACX,yBAAKgE,UAAU,mBACb,kBAAC,IAAD,CACEH,MAAK,UAAKZ,EAAOrD,OAAZ,YAAsBqD,EAAOnD,KAAK8C,cAAlC,aACL6B,MAAOxB,EAAOpD,gBACd6E,UAAW,EACXC,OAAQ1B,EAAOlD,GAAG6C,iBAGpB,SElENpC,EAA0CoE,EAA1CpE,UAAWD,EAA+BqE,EAA/BrE,UAAWE,EAAoBmE,EAApBnE,gBAgCfuC,EAvBY,WACzB,IAAM6B,EAAWC,cAEX5B,EAAYH,uBAAY,SAACnD,EAAgBE,EAAcC,GAC3D8E,EClBY,SAACjF,EAAgBE,EAAcC,GAA/B,8CAA8C,WAAO8E,GAAP,eAAAxC,EAAA,6DAC5DwC,EAAShE,EAAQX,QAAQ,CAAEN,SAAQE,OAAMC,QADmB,kBAG5BgF,EAA2BnF,EAAQE,EAAMC,GAHb,OAGpDF,EAHoD,OAI1DgF,EAAShE,EAAQR,eAAeR,IAJ0B,gDAM1DgF,EAAShE,EAAQP,cAAc,0CAN2B,yDAA9C,sDDkBHJ,CAAQN,EAAQE,EAAMC,MAC9B,CAAC8E,IAEE7E,EAAUgF,aAA4B,SAAC7E,GAAD,OAAWK,EAAUU,EAAYf,OACvE8C,EAAS+B,aAA2B,SAAC7E,GAAD,OAAWI,EAAUW,EAAYf,OACrEF,EAAe+E,aACnB,SAAC7E,GAAD,OAAWM,EAAgBS,EAAYf,OAGzC,OACE,kBAAC,EAAD,CACEH,QAASA,EACTiD,OAAQA,QAAUgC,EAClBhF,aAAcA,QAAgBgF,EAC9B/B,UAAWA,KEHFgC,G,cAlBO,kBACpB,kBAAC,IAAD,CAAUnE,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SAAZ,QAGA,kBAAC,IAAD,CAAUpF,GAAG,oBCpBvBqF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c3268bb4.chunk.js","sourcesContent":["export interface State {\n  amount: number | null,\n  convertedAmount: number | null,\n  from: string | null,\n  to: string | null,\n  pending: boolean,\n  errorMessage: string | null,\n}\n\nconst initialState: State = {\n  amount: null,\n  convertedAmount: null,\n  from: null,\n  to: null,\n  pending: false,\n  errorMessage: null,\n};\n\nexport default initialState;\n","import { PayloadAction } from 'redux-starter-kit';\nimport { State } from './state';\n\ntype ConvertPayload = {\n  amount: number,\n  from: string,\n  to: string,\n};\n\nconst convert = (state: State, { payload }: PayloadAction<ConvertPayload>): State => {\n  const { amount, from, to } = payload;\n  return {\n    ...state,\n    amount,\n    convertedAmount: null,\n    from,\n    to,\n    pending: true,\n    errorMessage: null,\n  };\n};\n\nconst resolveConvert = (state: State, { payload }: PayloadAction<number>): State => ({\n  ...state,\n  convertedAmount: payload,\n  pending: false,\n});\n\nconst rejectConvert = (state: State, { payload }: PayloadAction<string>): State => ({\n  ...state,\n  errorMessage: payload,\n  pending: false,\n});\n\nexport {\n  convert,\n  resolveConvert,\n  rejectConvert,\n};\n","import { State } from './state';\n\ntype Result = {\n  amount: number,\n  convertedAmount: number,\n  from: string,\n  to: string,\n} | null;\n\nconst getResult = (state: State): Result => {\n  const {\n    amount,\n    convertedAmount,\n    from,\n    to,\n  } = state;\n  if (\n    amount === null\n    || convertedAmount === null\n    || from === null\n    || to === null\n  ) {\n    return null;\n  }\n  return {\n    amount,\n    convertedAmount,\n    from,\n    to,\n  };\n};\n\nconst isPending = (state: State): boolean => state.pending;\n\nconst getErrorMessage = (state: State): string | null => state.errorMessage;\n\nexport {\n  getResult,\n  isPending,\n  getErrorMessage,\n};\n","import { createSlice } from 'redux-starter-kit';\nimport initialState from './state';\nimport * as reducers from './reducers';\nimport * as selectors from './selectors';\n\nconst name = 'exchange';\n\nconst { actions, reducer } = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport default reducer;\nexport {\n  name,\n  initialState,\n  actions,\n  selectors,\n};\n","import { configureStore } from 'redux-starter-kit';\nimport exchange from './exchange';\nimport { State } from './state';\n\nconst store = configureStore({\n  reducer: {\n    exchange,\n  },\n});\n\nconst getExchange = (state: State) => state.exchange;\n\nexport default store;\nexport {\n  getExchange,\n};\n","import React from 'react';\nimport {\n  Link,\n  useLocation,\n} from 'react-router-dom';\nimport { Layout as AntdLayout, Typography, Menu } from 'antd';\nimport './index.css';\n\nconst { Header, Content } = AntdLayout;\nconst { Title } = Typography;\n\ninterface LayoutProps {\n  children?: React.ReactNode,\n}\n\nconst Layout: React.FC<LayoutProps> = (props: LayoutProps) => {\n  const location = useLocation();\n  const { children } = props;\n  return (\n    <AntdLayout>\n      <Header>\n        <Title level={2}>\n          Currency\n        </Title>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          selectedKeys={[location.pathname]}\n        >\n          <Menu.Item key=\"/exchange\">\n            <Link to=\"/exchange\">\n              Exchange\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/rate\">\n            <Link to=\"/rate\">\n              Rate\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        {children}\n      </Content>\n    </AntdLayout>\n  );\n};\n\nexport default Layout;\n","interface OriginalResponse {\n  amount: number,\n  base: string,\n  date: string,\n  rates: {\n    [key: string]: number,\n  },\n}\n\nconst convertToAnotherCurrency = async (\n  amount: number,\n  from: string,\n  to: string,\n): Promise<number> => {\n  const query = `?amount=${amount}&from=${from}&to=${to}`;\n  const source = await fetch(`https://frankfurter.app/latest${query}`);\n  const response: OriginalResponse = await source.json();\n  return response.rates[to.toUpperCase()];\n};\n\nexport default convertToAnotherCurrency;\n","import React from 'react';\nimport {\n  Icon, Result, Form, Input, Statistic,\n} from 'antd';\nimport { parseExchangeQuery } from '../utils';\nimport './index.css';\n\nconst { useState, useCallback } = React;\n\ninterface ExchangeProps {\n  result?: {\n    amount: number,\n    convertedAmount: number,\n    from: string,\n    to: string,\n  },\n  errorMessage?: string,\n  pending?: boolean,\n  onConvert?: (amount: number, from: string, to: string) => void,\n}\n\nconst Exchange: React.FC<ExchangeProps> = (props: ExchangeProps) => {\n  const {\n    result,\n    errorMessage,\n    pending,\n    onConvert,\n  } = props;\n\n  const [isInvalidQuery, setIsInvalidQuery] = useState(false);\n  const hasErrors = isInvalidQuery || !!errorMessage;\n\n  const onSearch = useCallback((query) => {\n    const parseResult = parseExchangeQuery(query);\n    if (parseResult) {\n      setIsInvalidQuery(false);\n      const { amount, from, to } = parseResult;\n      onConvert && onConvert(amount, from, to);\n    } else {\n      setIsInvalidQuery(true);\n    }\n  }, [onConvert, setIsInvalidQuery]);\n\n  return (\n    <Result\n      icon={<Icon type=\"transaction\" />}\n      title=\"Exchange to another currency\"\n      subTitle=\"Type the amount with current currency and which currency to convert\"\n      extra={(\n        <div className=\"exchange\">\n          <Form>\n            <Form.Item\n              validateStatus={hasErrors ? 'error' : ''}\n              help={errorMessage}\n            >\n              <Input.Search\n                size=\"large\"\n                enterButton={<Icon type=\"enter\" />}\n                placeholder=\"100 usd in euro\"\n                loading={pending}\n                aria-label=\"Send\"\n                onSearch={onSearch}\n              />\n            </Form.Item>\n          </Form>\n          {(result && !pending) ? (\n            <div className=\"exchange-result\">\n              <Statistic\n                title={`${result.amount} ${result.from.toUpperCase()} to equal`}\n                value={result.convertedAmount}\n                precision={2}\n                suffix={result.to.toUpperCase()}\n              />\n            </div>\n          ) : null}\n        </div>\n      )}\n    />\n  );\n};\n\nexport default Exchange;\n","export const parseExchangeQuery = (\n  query: string,\n): { amount: number, from: string, to: string } | null => {\n  const result = query.match(/(\\d+)\\s+(\\w+)\\s+(?:in|to)\\s+(\\w+)/);\n  if (!result) {\n    return null;\n  }\n  return {\n    amount: Number(result[1]),\n    from: result[2],\n    to: result[3],\n  };\n};\n\nexport default null;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { convert } from '../../store/exchange/action-creators';\nimport ExchangeComponent from '../../components/exchange';\nimport { State } from '../../store/state';\nimport { getExchange } from '../../store';\nimport { selectors } from '../../store/exchange';\n\nconst { isPending, getResult, getErrorMessage } = selectors;\n\ntype Result = {\n  amount: number,\n  convertedAmount: number,\n  from: string,\n  to: string,\n} | null;\n\nconst Exchange: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onConvert = useCallback((amount: number, from: string, to: string) => {\n    dispatch(convert(amount, from, to));\n  }, [dispatch]);\n\n  const pending = useSelector<State, boolean>((state) => isPending(getExchange(state)));\n  const result = useSelector<State, Result>((state) => getResult(getExchange(state)));\n  const errorMessage = useSelector<State, string | null>(\n    (state) => getErrorMessage(getExchange(state)),\n  );\n\n  return (\n    <ExchangeComponent\n      pending={pending}\n      result={result || undefined}\n      errorMessage={errorMessage || undefined}\n      onConvert={onConvert}\n    />\n  );\n};\n\nexport default Exchange;\n","import converToAnotherCurrencyApi from '../../api/exchange';\nimport { actions } from '.';\n\nconst convert = (amount: number, from: string, to: string) => async (dispatch: Function) => {\n  dispatch(actions.convert({ amount, from, to }));\n  try {\n    const convertedAmount = await converToAnotherCurrencyApi(amount, from, to);\n    dispatch(actions.resolveConvert(convertedAmount));\n  } catch (exception) {\n    dispatch(actions.rejectConvert('Something went wrong, try again later'));\n  }\n};\n\nexport default null;\nexport {\n  convert,\n};\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Layout from './components/layout';\nimport Exchange from './containers/exchange';\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Router>\n      <Layout>\n        <Switch>\n          <Route path=\"/exchange\">\n            <Exchange />\n          </Route>\n          <Route path=\"/rate\">\n            Rate\n          </Route>\n          <Redirect to=\"/exchange\" />\n        </Switch>\n      </Layout>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n// import * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}