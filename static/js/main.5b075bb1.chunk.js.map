{"version":3,"sources":["store/exchange/state.ts","store/exchange/reducers.ts","store/exchange/selectors.ts","store/exchange/index.ts","store/rates/state.ts","store/rates/reducers.ts","store/rates/selectors.ts","store/rates/index.ts","store/index.ts","components/layout/index.tsx","containers/layout/index.tsx","api/exchange.ts","components/exchange/index.tsx","components/utils.ts","containers/exchange/index.tsx","store/exchange/action-creators.ts","components/rates/index.tsx","api/ip.ts","store/rates/action-creators.ts","containers/rates/index.tsx","app.tsx","index.tsx"],"names":["initialState","amount","convertedAmount","from","to","pending","errorMessage","convert","state","payload","resolveConvert","rejectConvert","getResult","isPending","getErrorMessage","createSlice","name","reducers","actions","reducer","currencies","baseCurrency","rates","error","changeBaseCurrency","resolveChangeBaseCurrency","rejectChangeBaseCurrency","getCurrencies","getBaseCurrency","getRates","hasError","store","configureStore","exchange","getExchange","Header","AntdLayout","Content","Title","Typography","Layout","props","activeMenu","children","level","theme","mode","selectedKeys","undefined","Item","key","location","useLocation","pathname","convertToAnotherCurrency","a","query","fetch","source","json","response","toUpperCase","base","map","currency","rate","useState","React","useCallback","Exchange","result","onConvert","isInvalidQuery","setIsInvalidQuery","hasErrors","onSearch","parseResult","match","Number","parseExchangeQuery","icon","type","title","subTitle","extra","className","validateStatus","help","Search","size","enterButton","placeholder","loading","aria-label","value","precision","suffix","selectors","dispatch","useDispatch","converToAnotherCurrencyApi","useSelector","Option","Select","Rates","activeCurrency","onChangeCurrency","onChange","message","showIcon","span","getCurrencyByIP","newBaseCurrency","getStore","currenciesToConvert","filter","getRatesApi","useEffect","defaultBaseCurrency","firstCurrency","getCurrencyByIPApi","autodetectedBaseCurrency","includes","newCurrency","getSlice","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b075bb1.chunk.js","sourcesContent":["export interface State {\n  amount: number | null,\n  convertedAmount: number | null,\n  from: string | null,\n  to: string | null,\n  pending: boolean,\n  errorMessage: string | null,\n}\n\nconst initialState: State = {\n  amount: null,\n  convertedAmount: null,\n  from: null,\n  to: null,\n  pending: false,\n  errorMessage: null,\n};\n\nexport default initialState;\n","import { PayloadAction } from 'redux-starter-kit';\nimport { State } from './state';\n\ntype ConvertPayload = {\n  amount: number,\n  from: string,\n  to: string,\n};\n\nconst convert = (state: State, { payload }: PayloadAction<ConvertPayload>): State => {\n  const { amount, from, to } = payload;\n  return {\n    ...state,\n    amount,\n    convertedAmount: null,\n    from,\n    to,\n    pending: true,\n    errorMessage: null,\n  };\n};\n\nconst resolveConvert = (state: State, { payload }: PayloadAction<number>): State => ({\n  ...state,\n  convertedAmount: payload,\n  pending: false,\n});\n\nconst rejectConvert = (state: State, { payload }: PayloadAction<string>): State => ({\n  ...state,\n  errorMessage: payload,\n  pending: false,\n});\n\nexport {\n  convert,\n  resolveConvert,\n  rejectConvert,\n};\n","import { State } from './state';\n\ntype Result = {\n  amount: number,\n  convertedAmount: number,\n  from: string,\n  to: string,\n} | null;\n\nconst getResult = (state: State): Result => {\n  const {\n    amount,\n    convertedAmount,\n    from,\n    to,\n  } = state;\n  if (\n    amount === null\n    || convertedAmount === null\n    || from === null\n    || to === null\n  ) {\n    return null;\n  }\n  return {\n    amount,\n    convertedAmount,\n    from,\n    to,\n  };\n};\n\nconst isPending = (state: State): boolean => state.pending;\n\nconst getErrorMessage = (state: State): string | null => state.errorMessage;\n\nexport {\n  getResult,\n  isPending,\n  getErrorMessage,\n};\n","import { createSlice } from 'redux-starter-kit';\nimport initialState from './state';\nimport * as reducers from './reducers';\nimport * as selectors from './selectors';\n\nconst name = 'exchange';\n\nconst { actions, reducer } = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport default reducer;\nexport {\n  name,\n  initialState,\n  actions,\n  selectors,\n};\n","export interface State {\n  currencies: Array<string>,\n  baseCurrency: string,\n  rates: Array<{\n    currency: string,\n    rate: number,\n  }>,\n  pending: boolean,\n  error: boolean,\n}\n\nconst initialState: State = {\n  currencies: ['RUB', 'USD', 'EUR'],\n  baseCurrency: '',\n  rates: [],\n  pending: false,\n  error: false,\n};\n\nexport default initialState;\n","import { PayloadAction } from 'redux-starter-kit';\nimport { State } from './state';\n\nconst changeBaseCurrency = (state: State, { payload }: PayloadAction<string>): State => ({\n  ...state,\n  baseCurrency: payload,\n  rates: [],\n  pending: true,\n  error: false,\n});\n\ntype Rates = Array<{\n  currency: string,\n  rate: number,\n}>;\n\nconst resolveChangeBaseCurrency = (\n  state: State,\n  { payload }: PayloadAction<Rates>,\n): State => ({\n  ...state,\n  rates: payload,\n  pending: false,\n});\n\nconst rejectChangeBaseCurrency = (state: State): State => ({\n  ...state,\n  error: true,\n  pending: false,\n});\n\nexport {\n  changeBaseCurrency,\n  resolveChangeBaseCurrency,\n  rejectChangeBaseCurrency,\n};\n","import { State } from './state';\n\nconst getCurrencies = (state: State): Array<string> => state.currencies;\n\nconst getBaseCurrency = (state: State): string => state.baseCurrency;\n\nconst getRates = (state: State): typeof state.rates => state.rates;\n\nconst isPending = (state: State): boolean => state.pending;\n\nconst hasError = (state: State): boolean => state.error;\n\nexport {\n  getCurrencies,\n  getBaseCurrency,\n  getRates,\n  isPending,\n  hasError,\n};\n","import { createSlice } from 'redux-starter-kit';\nimport initialState from './state';\nimport * as reducers from './reducers';\nimport * as selectors from './selectors';\n\nconst name = 'rates';\n\nconst { actions, reducer } = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport default reducer;\nexport {\n  name,\n  initialState,\n  actions,\n  selectors,\n};\n","import { configureStore } from 'redux-starter-kit';\nimport exchange from './exchange';\nimport rates from './rates';\nimport { State } from './state';\n\nconst store = configureStore({\n  reducer: {\n    exchange,\n    rates,\n  },\n});\n\nconst getExchange = (state: State) => state.exchange;\n\nconst getRates = (state: State) => state.rates;\n\nexport default store;\nexport {\n  getExchange,\n  getRates,\n};\n","import React from 'react';\nimport {\n  Link,\n} from 'react-router-dom';\nimport { Layout as AntdLayout, Typography, Menu } from 'antd';\nimport './index.css';\n\nconst { Header, Content } = AntdLayout;\nconst { Title } = Typography;\n\ninterface LayoutProps {\n  activeMenu?: string,\n  children?: React.ReactNode,\n}\n\nconst Layout: React.FC<LayoutProps> = (props: LayoutProps) => {\n  const { activeMenu, children } = props;\n  return (\n    <AntdLayout>\n      <Header>\n        <Title level={2}>\n          Currency\n        </Title>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          selectedKeys={activeMenu ? [activeMenu] : undefined}\n        >\n          <Menu.Item key=\"/exchange\">\n            <Link to=\"/exchange\">\n              Exchange\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/rates\">\n            <Link to=\"/rates\">\n              Rates\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        {children}\n      </Content>\n    </AntdLayout>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport {\n  useLocation,\n} from 'react-router-dom';\nimport LayoutComponent from '../../components/layout';\n\ninterface LayoutProps {\n  children?: React.ReactNode,\n}\n\nconst Layout: React.FC<LayoutProps> = (props: LayoutProps) => {\n  const location = useLocation();\n  const { children } = props;\n  return (\n    <LayoutComponent activeMenu={location.pathname}>\n      {children}\n    </LayoutComponent>\n  );\n};\n\nexport default Layout;\n","const entrypoint = 'https://frankfurter.app';\n\ninterface OriginalResponse {\n  amount: number,\n  base: string,\n  date: string,\n  rates: {\n    [key: string]: number,\n  },\n}\n\nconst convertToAnotherCurrency = async (\n  amount: number,\n  from: string,\n  to: string,\n): Promise<number> => {\n  const query = `?amount=${amount}&from=${from}&to=${to}`;\n  const source = await fetch(`${entrypoint}/latest${query}`);\n  const response: OriginalResponse = await source.json();\n  return response.rates[to.toUpperCase()];\n};\n\ntype Rates = Array<{\n  currency: string,\n  rate: number,\n}>;\n\nconst getRates = async (\n  base: string,\n  to: Array<string>,\n): Promise<Rates> => {\n  const query = `?from=${base}&to=${to}`;\n  const source = await fetch(`${entrypoint}/latest${query}`);\n  const { rates }: OriginalResponse = await source.json();\n  return to.map((currency) => ({\n    currency,\n    // api returns rate in base currency,\n    // so we need to convert this value\n    rate: 1 / rates[currency.toUpperCase()],\n  }));\n};\n\nexport default convertToAnotherCurrency;\nexport {\n  convertToAnotherCurrency,\n  getRates,\n};\n","import React from 'react';\nimport {\n  Icon, Result, Form, Input, Statistic,\n} from 'antd';\nimport { parseExchangeQuery } from '../utils';\nimport './index.css';\n\nconst { useState, useCallback } = React;\n\ninterface ExchangeProps {\n  result?: {\n    amount: number,\n    convertedAmount: number,\n    from: string,\n    to: string,\n  },\n  errorMessage?: string,\n  pending?: boolean,\n  onConvert?: (amount: number, from: string, to: string) => void,\n}\n\nconst Exchange: React.FC<ExchangeProps> = (props: ExchangeProps) => {\n  const {\n    result,\n    errorMessage,\n    pending,\n    onConvert,\n  } = props;\n\n  const [isInvalidQuery, setIsInvalidQuery] = useState(false);\n  const hasErrors = isInvalidQuery || !!errorMessage;\n\n  const onSearch = useCallback((query) => {\n    const parseResult = parseExchangeQuery(query);\n    if (parseResult) {\n      setIsInvalidQuery(false);\n      const { amount, from, to } = parseResult;\n      onConvert && onConvert(amount, from, to);\n    } else {\n      setIsInvalidQuery(true);\n    }\n  }, [onConvert, setIsInvalidQuery]);\n\n  return (\n    <Result\n      icon={<Icon type=\"transaction\" />}\n      title=\"Exchange to another currency\"\n      subTitle=\"Type the amount with current currency and which currency to convert\"\n      extra={(\n        <div className=\"exchange\">\n          <Form>\n            <Form.Item\n              validateStatus={hasErrors ? 'error' : ''}\n              help={errorMessage}\n            >\n              <Input.Search\n                size=\"large\"\n                enterButton={<Icon type=\"enter\" />}\n                placeholder=\"100 usd in eur\"\n                loading={pending}\n                aria-label=\"Send\"\n                onSearch={onSearch}\n              />\n            </Form.Item>\n          </Form>\n          {(result && !pending) ? (\n            <div className=\"exchange-result\">\n              <Statistic\n                title={`${result.amount} ${result.from.toUpperCase()} to equal`}\n                value={result.convertedAmount}\n                precision={2}\n                suffix={result.to.toUpperCase()}\n              />\n            </div>\n          ) : null}\n        </div>\n      )}\n    />\n  );\n};\n\nexport default Exchange;\n","export const parseExchangeQuery = (\n  query: string,\n): { amount: number, from: string, to: string } | null => {\n  const result = query.match(/(\\d+)\\s+(\\w+)\\s+(?:in|to)\\s+(\\w+)/);\n  if (!result) {\n    return null;\n  }\n  return {\n    amount: Number(result[1]),\n    from: result[2],\n    to: result[3],\n  };\n};\n\nexport default null;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { convert } from '../../store/exchange/action-creators';\nimport ExchangeComponent from '../../components/exchange';\nimport { State } from '../../store/state';\nimport { getExchange } from '../../store';\nimport { selectors } from '../../store/exchange';\n\nconst { isPending, getResult, getErrorMessage } = selectors;\n\ntype Result = {\n  amount: number,\n  convertedAmount: number,\n  from: string,\n  to: string,\n} | null;\n\nconst Exchange: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onConvert = useCallback((amount: number, from: string, to: string) => {\n    dispatch(convert(amount, from, to));\n  }, [dispatch]);\n\n  const pending = useSelector<State, boolean>((state) => isPending(getExchange(state)));\n  const result = useSelector<State, Result>((state) => getResult(getExchange(state)));\n  const errorMessage = useSelector<State, string | null>(\n    (state) => getErrorMessage(getExchange(state)),\n  );\n\n  return (\n    <ExchangeComponent\n      pending={pending}\n      result={result || undefined}\n      errorMessage={errorMessage || undefined}\n      onConvert={onConvert}\n    />\n  );\n};\n\nexport default Exchange;\n","import converToAnotherCurrencyApi from '../../api/exchange';\nimport { actions } from '.';\n\nconst convert = (amount: number, from: string, to: string) => async (dispatch: Function) => {\n  dispatch(actions.convert({ amount, from, to }));\n  try {\n    const convertedAmount = await converToAnotherCurrencyApi(amount, from, to);\n    dispatch(actions.resolveConvert(convertedAmount));\n  } catch (exception) {\n    dispatch(actions.rejectConvert('Something went wrong, try again later'));\n  }\n};\n\nexport default null;\nexport {\n  convert,\n};\n","import React from 'react';\nimport {\n  Icon, Result, Statistic, Card, Row, Col, Select,\n  Spin, Alert,\n} from 'antd';\nimport './index.css';\n\nconst { Option } = Select;\n\ninterface RatesProps {\n  currencies: Array<string>,\n  activeCurrency: string,\n  rates?: Array<{\n    currency: string,\n    rate: number,\n  }>,\n  pending?: boolean,\n  hasError?: boolean,\n  onChangeCurrency?: (currency: string) => void,\n}\n\nconst Rates: React.FC<RatesProps> = (props: RatesProps) => {\n  const {\n    currencies,\n    activeCurrency,\n    rates = [],\n    pending = false,\n    hasError = false,\n    onChangeCurrency,\n  } = props;\n\n  return (\n    <Result\n      icon={<Icon type=\"fund\" />}\n      title={(\n        <span className=\"rates-title\">\n          Currency Rates to\n          <Select\n            value={activeCurrency}\n            onChange={onChangeCurrency}\n          >\n            {currencies.map((currency) => (\n              <Option key={currency} value={currency}>\n                {currency}\n              </Option>\n            ))}\n          </Select>\n        </span>\n      )}\n      extra={(\n        <div className=\"rates\">\n          {pending && <Spin />}\n          {hasError && <Alert message=\"Something wrong, try again later\" type=\"error\" showIcon />}\n          <div>\n            <Row>\n              {rates.map(({ currency, rate }) => (\n                <Col span={12} key={currency}>\n                  <Card>\n                    <Statistic\n                      title={`1 ${currency.toUpperCase()} =`}\n                      value={rate}\n                      precision={2}\n                      suffix={activeCurrency.toUpperCase()}\n                    />\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default Rates;\n","const entrypoint = 'http://ip-api.com';\n\ninterface OriginalResponse {\n  currency: string,\n}\n\nconst getCurrencyByIP = async (): Promise<string> => {\n  const source = await fetch(`${entrypoint}/json/?fields=currency`);\n  const response: OriginalResponse = await source.json();\n  return response.currency.toUpperCase();\n};\n\nexport default getCurrencyByIP;\n","import { getRates as getRatesApi } from '../../api/exchange';\nimport getCurrencyByIPApi from '../../api/ip';\nimport { actions, selectors } from '.';\nimport { State } from '../state';\nimport { getRates } from '..';\n\nconst changeBaseCurrency = (newBaseCurrency: string) => async (\n  dispatch: Function,\n  getStore: Function,\n) => {\n  dispatch(actions.changeBaseCurrency(newBaseCurrency));\n  const state: State = getStore();\n  const currencies = selectors.getCurrencies(getRates(state));\n  const currenciesToConvert = currencies.filter((currency) => currency !== newBaseCurrency);\n  try {\n    const rates = await getRatesApi(newBaseCurrency, currenciesToConvert);\n    dispatch(actions.resolveChangeBaseCurrency(rates));\n  } catch (exception) {\n    dispatch(actions.rejectChangeBaseCurrency());\n  }\n};\n\nconst enterToRates = () => async (\n  dispatch: Function,\n  getStore: Function,\n) => {\n  const state: State = getStore();\n  let defaultBaseCurrency = selectors.getBaseCurrency(getRates(state));\n  if (!defaultBaseCurrency) {\n    const currencies = selectors.getCurrencies(getRates(state));\n    const firstCurrency = currencies[0];\n    try {\n      const autodetectedBaseCurrency = await getCurrencyByIPApi();\n      if (!currencies.includes(autodetectedBaseCurrency)) {\n        defaultBaseCurrency = firstCurrency;\n      } else {\n        defaultBaseCurrency = autodetectedBaseCurrency;\n      }\n    } catch (exception) {\n      defaultBaseCurrency = firstCurrency;\n    }\n  }\n  dispatch(changeBaseCurrency(defaultBaseCurrency));\n};\n\nexport default null;\nexport {\n  changeBaseCurrency,\n  enterToRates,\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport RatesComponent from '../../components/rates';\nimport { State } from '../../store/state';\nimport { getRates as getSlice } from '../../store';\nimport { selectors } from '../../store/rates';\nimport { changeBaseCurrency, enterToRates } from '../../store/rates/action-creators';\n\nconst {\n  getCurrencies,\n  getBaseCurrency,\n  getRates,\n  isPending,\n  hasError,\n} = selectors;\n\ntype Rates = Array<{\n  currency: string,\n  rate: number,\n}>;\n\nconst Rates: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(enterToRates());\n  }, [dispatch]);\n\n  const onChangeCurrency = useCallback((newCurrency: string) => {\n    dispatch(changeBaseCurrency(newCurrency));\n  }, [dispatch]);\n\n  const currencies = useSelector<State, Array<string>>((state) => getCurrencies(getSlice(state)));\n  const baseCurrency = useSelector<State, string>((state) => getBaseCurrency(getSlice(state)));\n  const rates = useSelector<State, Rates>((state) => getRates(getSlice(state)));\n  const pending = useSelector<State, boolean>((state) => isPending(getSlice(state)));\n  const error = useSelector<State, boolean>((state) => hasError(getSlice(state)));\n\n  return (\n    <RatesComponent\n      currencies={currencies}\n      activeCurrency={baseCurrency}\n      rates={rates}\n      pending={pending}\n      hasError={error}\n      onChangeCurrency={onChangeCurrency}\n    />\n  );\n};\n\nexport default Rates;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Layout from './containers/layout';\nimport Exchange from './containers/exchange';\nimport Rates from './containers/rates';\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Router>\n      <Layout>\n        <Switch>\n          <Route path=\"/exchange\">\n            <Exchange />\n          </Route>\n          <Route path=\"/rates\">\n            <Rates />\n          </Route>\n          <Redirect to=\"/exchange\" />\n        </Switch>\n      </Layout>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n// import * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}